% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cv.svydesign.R
\name{cv.svydesign}
\alias{cv.svydesign}
\title{CV for `svydesign` objects}
\usage{
cv.svydesign(
  design_object,
  formulae,
  nfolds = 5,
  method = c("linear", "logistic")
)
}
\arguments{
\item{design_object}{Name of a `svydesign` object created using the `survey`
package. The argument `ids` (also `strata`, `fpc`, and/or `weights` if used)
must be specified as formulas, e.g. `svydesign(ids = ~MyPSUs, ...)`.
We do not yet support use of `probs` or `pps`.}

\item{formulae}{Vector of formulas (as strings) for the GLMs to be compared in
cross validation}

\item{nfolds}{Number of folds to be used during cross validation, defaults to
5}

\item{method}{String, must be either "linear" or "logistic", determines type of
model fit during cross validation, defaults to linear}
}
\description{
Wrapper function which takes a `svydesign` object
and a vector of model formulas (as strings),
and passes it into `cv.svy()`.
}
\examples{
# Compare CV MSEs and their SEs under 3 models
# for a stratified sample and a one-stage cluster sample,
# from the `survey` package
library(survey)
data("api", package = "survey")
# stratified sample
dstrat <- svydesign(id = ~1, strata = ~stype, weights = ~pw, data = apistrat,
                    fpc = ~fpc)
cv.svydesign(formulae = c("api00~ell",
                          "api00~ell+meals",
                          "api00~ell+meals+mobility"),
             design_object = dstrat, nfolds = 5)
# one-stage cluster sample
dclus1 <- svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)
cv.svydesign(formulae = c("api00~ell",
                          "api00~ell+meals",
                          "api00~ell+meals+mobility"),
             design_object = dclus1, nfolds = 5)

# Compare CV MSEs and their SEs under 3 models
# for a stratified cluster sample with clusters nested within strata
data(NSFG_data)
library(splines)
NSFG.svydes <- svydesign(id = ~SECU, strata = ~strata, nest = TRUE,
                         weights = ~wgt, data = NSFG_data)
cv.svydesign(formulae = c("income ~ ns(age, df = 2)",
                          "income ~ ns(age, df = 3)",
                          "income ~ ns(age, df = 4)"),
             design_object = NSFG.svydes, nfolds = 4)
}
